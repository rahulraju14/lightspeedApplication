package com.lightspeedeps.web.payroll;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.faces.bean.ManagedBean;
import javax.faces.bean.ViewScoped;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

import com.lightspeedeps.message.Mailer;
import com.lightspeedeps.model.Project;
import com.lightspeedeps.model.User;
import com.lightspeedeps.object.TimecardMessage;
import com.lightspeedeps.util.app.Constants;
import com.lightspeedeps.util.app.MsgUtils;
import com.lightspeedeps.util.app.ServiceFinder;
import com.lightspeedeps.util.app.SessionUtils;
import com.lightspeedeps.util.report.ReportGenerator;
import com.lightspeedeps.web.popup.PopupInputBigBean;

/**
 * This class extends PopupOutputBean to display any messages after HTG processing has completed.
 * User will be able to print or email messages to themselves.
 */
@ManagedBean
@ViewScoped
public class HtgMessageBean extends PopupInputBigBean {
	private static final long serialVersionUID = 1L;

	private static final Log log = LogFactory.getLog(HtgMessageBean.class);

	/** Number of timecards calculated */
	private int tcDone;
	/** Number of timecards selected to process */
	private int tcSelected;
	/** Message generated depending on whether any timecards were calculated */
	private String doneMsg;
	/**
	 * Out containing timecard calculated amount, selected amount and any messages generated during
	 * HTG calculation
	 */
	private String output;
	/** Title of the generated results */
	private final String outputTitle;
	/** Title of the section displaying the results */
	private final String outputSectionTitle;
	/** Formatted output of the timecards selected */
	private String outputSectionTimecardsSelected;
	/** Formatted output of the timecards calculated */
	private String outputSectionTimecardsCalculated;
	/** Title of section that displays any generated messages */
	private final String outputSectionNotifications;
	/** List of messages generated during HTG calculation */
	private List<TimecardMessage> timecardMsgs;

	private final String emailBttnLbl;
	private final String printBttnLbl;
	private final String cancelBttnLbl;

	public HtgMessageBean() {
		outputTitle = MsgUtils.getMessage("HtgMessage.Title");
		outputSectionTitle = MsgUtils.getMessage("HtgMessage.OutputSection.Title");
		outputSectionNotifications = MsgUtils.getMessage("HtgMessage.OutputSection.Notification.Title");
		emailBttnLbl = MsgUtils.getMessage("HtgMessage.Email.Ok");
		printBttnLbl = MsgUtils.getMessage("HtgMessage.Print.Ok");
		cancelBttnLbl = MsgUtils.getMessage("HtgMessage.Cancel");
	}

	public static HtgMessageBean getInstance() {
		return (HtgMessageBean) ServiceFinder.findBean("htgMessageBean");
	}

	/**
	 * Send email with the results of HTG run
	 *
	 * @return action
	 */
	public String actionEmail() {
		Mailer mailer;
		User user;

		user = SessionUtils.getCurrentUser();

		mailer = Mailer.getInstance();
		mailer.sendMail(user.getEmailAddress(), outputTitle, outputSectionTitle + Constants.NEW_LINE + getOutput());

		return null;
	}

	/**
	 * Generate pdf and open in browser functionality with the resluts of the HTG run
	 *
	 * @return action
	 */
	public String actionPrint() {
		buildReport();

		return null;
	}

	@Override
	public String actionCancel() {
		return super.actionCancel();
	}

	/**
	 * Display a dialog box with the messages generated by a "Run HTG" request.
	 *
	 * @param results A list of 2 Integer values, the first being the number of
	 *            timecards selected by the user, the second being the number of
	 *            timecards calculated.
	 * @param tcMessages - List of messages generated while calculating HTG
	 */
	public static void showHtgMessages(List<Integer> results, List<TimecardMessage> tcMessages) {
		HtgMessageBean bean = HtgMessageBean.getInstance();

		if (bean.isVisible()) { // probably double-clicked
			log.debug("ignoring double-click");
			return;
		}

		bean.setTimecardMsgs(tcMessages);
		// results list contains the follow values.
		// Total timecards selected
		// Total timecards calculated
		bean.setTcSelected(results.get(0));
		bean.setTcDone(results.get(1));

		bean.generateOutputMsg();

		bean.show(null, 0, "HtgMessage.Title", null, null);

	}

	/**
	 * Generate the output to be displayed for the page, email and pdf.
	 */
	public void generateOutputMsg() {
		StringBuffer outputBuffer = new StringBuffer();

		outputSectionTimecardsSelected = MsgUtils.formatMessage("HtgMessage.OutputSection.TimecardsSelected", tcSelected);
		outputSectionTimecardsCalculated = MsgUtils.formatMessage("HtgMessage.OutputSection.TimecardsCalculated", tcDone);

		if (tcDone == 0) {
			doneMsg = MsgUtils.formatMessage("Timecard.HTG.NoneDone");
		}
		else {
			doneMsg = MsgUtils.formatMessage("Timecard.HTG.Done", tcDone);
		}

		outputBuffer.append(outputSectionTimecardsSelected + Constants.NEW_LINE);
		outputBuffer.append(outputSectionTimecardsCalculated + Constants.NEW_LINE + Constants.NEW_LINE);
		outputBuffer.append(outputSectionNotifications + Constants.NEW_LINE);
		outputBuffer.append(doneMsg);

		for (TimecardMessage tcMsg : timecardMsgs) {
			outputBuffer.append(Constants.NEW_LINE + tcMsg.getText());
		}

		output = outputBuffer.toString();
	}

	/**
	 * Build the pdf report that will be opened in the browser
	 */
	private void buildReport() {
		Map<String, Object> parameters = new HashMap<String, Object>();
		Project project = SessionUtils.getCurrentProject();

		TimecardMessage msg = new TimecardMessage(outputSectionTimecardsSelected);
		timecardMsgs.add(0, msg);
		msg = new TimecardMessage(outputSectionTimecardsCalculated);
		timecardMsgs.add(1, msg);
		msg = new TimecardMessage(outputSectionNotifications);
		timecardMsgs.add(2, msg);

		parameters.put("REPORT_TITLE", outputTitle);
		parameters.put("REPORT_SECTION_TITLE", outputSectionTitle);
		parameters.put("REPORT_BODY", timecardMsgs);

		ReportGenerator.generateReport(project, null, parameters, "htgMessages", null, null, true, false, null);

	}

	public void setTimecardMsgs(List<TimecardMessage> timecardMsgs) {
		this.timecardMsgs = timecardMsgs;
	}

	public void setTcDone(int tcDone) {
		this.tcDone = tcDone;
	}

	public void setTcSelected(int tcSelected) {
		this.tcSelected = tcSelected;
	}

	public String getOutputTitle() {
		return outputTitle;
	}

	public String getOutputSectionTitle() {
		return outputSectionTitle;
	}

	public String getOutputSectionTimecardsSelected() {
		return outputSectionTimecardsSelected;
	}

	public String getOutputSectionTimecardsCalculated() {
		return outputSectionTimecardsCalculated;
	}

	public String getEmailBttnLbl() {
		return emailBttnLbl;
	}

	public String getPrintBttnLbl() {
		return printBttnLbl;
	}

	public String getCancelBttnLbl() {
		return cancelBttnLbl;
	}

	public String getOutputSectionNotifications() {
		return outputSectionNotifications;
	}

	public String getOutput() {
		return output;
	}

	public void setOutput(String output) {
		this.output = output;
	}
}
