/**
 * File: ListImageView.java
 */
package com.lightspeedeps.web.view;

import java.io.Serializable;
import java.util.Set;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

import com.lightspeedeps.model.Image;
import com.lightspeedeps.util.app.EventUtils;
import com.lightspeedeps.web.image.ImageAddBean;
import com.lightspeedeps.web.image.ImageHolder;
import com.lightspeedeps.web.image.ImagePaginatorBean;

/**
 * A superclass for classes that combine an element list with a detail view, and
 * includes support for a set of images associated with the current item. It
 * provides this by adding image management services to the {@link ListView}
 * class.The image management is mostly delegated to the {@link ImageAddBean}
 * and {@link ImagePaginatorBean} contained in this class.
 * <p>
 * Most of the pages backed by subclasses of this class will include a mini-tab
 * where the user can manage the images.
 */
public abstract class ListImageView extends ListView implements ImageHolder, Serializable {
	/** */
	private static final long serialVersionUID = - 889881341179996552L;

	private static final Log log = LogFactory.getLog(ListImageView.class);

	/** Images that have been added but not saved; managed by {@link ImageAddBean}. */
	protected Set<Image> addedImages;

	/** The backing bean for the Add Image dialog. */
	private ImageAddBean imageAddBean;

	/** The backing bean which handles deleting images. */
	private final ImagePaginatorBean imagePaginatorBean;

	/** The message id in our message resource file of the message to be
	 * generated when an image has been successfully uploaded. Subclasses may
	 * change this, or set it to null to suppress the upload message. */
	private String imageAddedMessageId = "Image.FileUploaded";

	/**
	 * @return The name of the item with which a new image being uploaded will
	 *         be associated. This name will be used in messages generated by
	 *         the image management bean(s).  The method is abstract in this
	 *         class and must be provided by subclasses.
	 */
	public abstract String getElementName();

	/**
	 * Normal constructor.
	 *
	 * @param defaultSortColumn The default sort-key, which determines which
	 *            column in our main list is used to sort the items for their
	 *            initial display. The available sort-key values are usually
	 *            defined as static constants in the model class that
	 *            corresponds to the items in the list.
	 * @param prefix The message id prefix, used by several superclass methods
	 *            that provide standard functions (such as Delete), often with
	 *            dialog boxes. The prefix is used to create a full message id
	 *            which will be looked up in our messageResources.properties
	 *            file. By convention, the supplied prefix should end with a
	 *            period. The string usual reflects the primary type of item or
	 *            function of the page being backed, e.g., "Project." or
	 *            "Contact.".
	 */
	public ListImageView(String defaultSortColumn, String prefix) {
		super(defaultSortColumn, prefix);
		log.debug("");

		imagePaginatorBean = ImagePaginatorBean.getInstance();
		imagePaginatorBean.setImageHolder(this);
		imagePaginatorBean.setAutoCommit(false);
	}

	/**
	 * Release image-related resources -- we clear the 'addedImages' collection,
	 * and our imageAddBean reference.
	 */
	protected void resetImages() {
		setAddedImages(null);
		setImageAddBean(null);
	}

	/**
	 * Action method for a "New Image" or "Add Image" button. Opens the "Add
	 * Image" dialog box.
	 *
	 * @return null navigation string
	 */
	public String actionOpenNewImage() {
		String res = null;
		try {
			if (imageAddBean == null) {
				imageAddBean = ImageAddBean.getInstance();
			}
			imageAddBean.setAutoCommit(false);
			imageAddBean.setForMap(false);
			imageAddBean.setAddedMessageId(imageAddedMessageId);
			res = imageAddBean.actionOpenNewImage(this, getElementName());
			addClientResizeScroll();
		}
		catch (Exception e) {
			EventUtils.logError(e);
		}
		return res;
	}

	/**
	 * Callback from ImagePaginatorBean.
	 */
	@Override
	public void removeImage(Image image) {
		try {
			boolean rem = getImageList().remove(image);
			log.debug("image="+image+", removed="+rem);
		}
		catch (Exception e) {
			EventUtils.logError(e);
		}
	}

	@Override
	public void updateImage(Image image, String filename) {
		log.debug("");
		try {
			if (image != null) {
				getImageList().add(image);
			}
		}
		catch (Exception e) {
			EventUtils.logError(e);
		}
	}

	protected void commitImages() {
		imagePaginatorBean.commit();
	}

	/**
	 * Standard activities for all subclasses when a Save completes.
	 * In particular, we release any image-related resources.
	 * @return superclass' return value
	 */
	@Override
	public String actionSave() {
		resetImages();
		return super.actionSave();
	}

	/**
	 * The Action method for Cancel button while in Edit mode. Cleans up the
	 * state of any images added or removed, and calls our superclass'
	 * actionCancel() method.
	 *
	 * @return null navigation string
	 */
	@Override
	public String actionCancel() {
		log.debug("");
		try {
			super.actionCancel();
			imagePaginatorBean.rollback();
			ImageAddBean.rollback(this);
			resetImages();
		}
		catch (Exception e) {
			EventUtils.logError(e);
		}
		return null;
	}

	/** Provide access to hasChanges() method of paginator bean. */
	public boolean hasImageChanges() {
		return imagePaginatorBean.hasChanges();
	}

	/** Provides implementation required by ImageHolder interface. */
	@Override
	public void addEndingJavascript() {
		addClientResizeScroll();
	}

	/** See {@link #addedImages}. */
	@Override
	public Set<Image> getAddedImages() {
		return addedImages;
	}
	/** See {@link #addedImages}. */
	@Override
	public void setAddedImages(Set<Image> addedImages) {
		this.addedImages = addedImages;
	}

	/** See {@link #imageAddBean}. */
	public ImageAddBean getImageAddBean() {
		return imageAddBean;
	}
	/** See {@link #imageAddBean}. */
	public void setImageAddBean(ImageAddBean imageAddBean) {
		this.imageAddBean = imageAddBean;
	}

	/** See {@link #imageAddedMessageId}. */
	public String getImageAddedMessageId() {
		return imageAddedMessageId;
	}
	/** See {@link #imageAddedMessageId}. */
	public void setImageAddedMessageId(String imageAddedMessageId) {
		this.imageAddedMessageId = imageAddedMessageId;
	}

}
