package com.lightspeedeps.dao;

import java.util.ArrayList;
import java.util.List;

import javax.faces.model.SelectItem;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

import com.lightspeedeps.model.SelectionItem;

/**
 * A data access object (DAO) providing persistence and search support for
 * SelectionItem entities.
 * <p>
 * Note that most of the common functions (save, delete, findById, etc.) are in
 * one of the superclasses {@link com.lightspeedeps.dao.BaseDAO} or
 * {@link com.lightspeedeps.dao.BaseTypeDAO}.
 * <p>
 * Every DAO class implements a getInstance() method, which is the way they
 * should be accessed.
 *
 * @see com.lightspeedeps.model.SelectionItem
 */
public class SelectionItemDAO extends BaseTypeDAO<SelectionItem> {
	@SuppressWarnings("unused")
	private static final Log log = LogFactory.getLog(SelectionItemDAO.class);

	//property constants
	//public static final String TYPE = "type";
	//public static final String NAME = "name";
	//public static final String LABEL = "label";

	public static SelectionItemDAO getInstance() {
		return (SelectionItemDAO)getInstance("SelectionItemDAO");
	}

	/**
	 * Create a List of SelectItem`s for use as a drop-down list, by retrieving
	 * all the SelectionItem table entries with the given type.
	 *
	 * @param type
	 * @return A non-null, but possibly blank, List of SelectItem entries.
	 */
	@SuppressWarnings("unchecked")
	public List<SelectItem> createDLbyType(String type) {
		String query = "from SelectionItem where type = ? order by id";
		List<SelectionItem> list = find(query, type);
		List<SelectItem> selects = new ArrayList<SelectItem>();
		for (SelectionItem item : list) {
			selects.add(new SelectItem(item.getName(), item.getLabel()));
		}
		return selects;
	}

	@SuppressWarnings("unchecked")
	public List<SelectionItem> findBillers(String type) {
		String query = "from SelectionItem where type = ? order by id";
		return find(query, type);
	}

	/**
	 * Create a List of SelectItem`s for use as a drop-down list, by retrieving
	 * all the SelectionItem table entries with the given type. The first entry
	 * in the returned List will have a label given by 'selectPrompt', with a
	 * value of null.
	 *
	 * @param type
	 * @return A non-null List of SelectItem entries with at least a single
	 *         entry generated by using the 'selectPrompt' as a label and null
	 *         as a value.
	 */
	public List<SelectItem> createDLbyType(String type, String selectPrompt) {
		List<SelectItem> selects = createDLbyType(type);
		selects.add(0, new SelectItem(null, selectPrompt));
		return selects;
	}

	/**
	 * Find the label that matches the given selection type and name (key).
	 *
	 * @param type The 'type' of SelectionItem, which (essentially) identifies
	 *            the list being searched.
	 * @param name The 'name' or key of the specific selectionItem wanted. This
	 *            corresponds to the 'value' field when the SelectionItem`s are
	 *            put into a SelectItem list.
	 * @return The matching label, or null if there was no match. If there are
	 *         multiple matches (which shouldn't happen), the 'first' one (as
	 *         selected by the SQL server) is returned.
	 */
	public String findLabel(String type, String name) {
		String query = "from SelectionItem where type = ? and name = ?";
		Object values[] = { type, name };
		SelectionItem item = findOne(query, values);
		if (item != null) {
			return item.getLabel();
		}
		return null;
	}

}
